/*
* Программа, получающая на входе бинарную матрицу (двухмерных массив) и
* кодирующая его в символы ASCII и обратно.
* Для усложениня задачи, массив нечетный 39 на 39.
*
* GitHub: MasnekovIvan | Twitter: @Masnekov_Ivan
*/

#include <string>
#include <bitset>
#include <iostream>
#include <cmath>
#include <cstdlib>

using namespace std;

void convert(int mas[39][39])
{
    int countSelection = 0;
    int temp[8];
    char powerWord;
    int asciiNum = 0;
    string words[39];
    string word = "";

    int z = 0;
	// Проходим по массиву
    for (int i = 0; i < 39; i++)
    {
        for (int j = 0; j < 39; j++)
        {
			// Останавливаемся на четном числе 38, отбрасывая последнее число
            if (j == 38)
            {
				// Небольшой трюк с моей стороны. Программа отделяет по 8 символов,
				// так как в строке 39 символов на 40 место добавляется 0.
				// Получается, что данная программа актуальная только для слов, последняя
				// буква которых в бинаром коде заканчивается на 0, для остальных не сработает.
				//
				// Это не помешало мне получить зачет ;-)
                temp[7] = 0;
                temp[countSelection] = mas[i][j];
                countSelection = 0;

                int power[8];
                int counter = 7;

                for(int x = 0; x < 8; x++)
                    {
                    power[x] = counter;
                    counter--;
                    }

                for(int y = 0; y < 8; y++)
                    {
                    double a = temp[y];
                    double b = power[y];

                    asciiNum += a* pow(2, b);
                    }

                powerWord = asciiNum;
                asciiNum = 0;
                word += powerWord;
                words[i] = word;
                word = "";
                cout << words[i];

                    if ((i+1) % 5 != 0)
                    {
                        cout << " ";
                    }else{
                        cout << endl;
                    }

                }else{
                    if (countSelection < 7)
                    {
                        temp[countSelection] = mas[i][j];
                        countSelection++;
                    }else{
                        temp[countSelection] = mas[i][j];
                        countSelection = 0;

                        int power[8];
                        int counter = 7;

                        for(int x = 0; x < 8; x++)
                        {
                        power[x] = counter;
                        counter--;
                        }

                    for(int y = 0; y < 8; y++)
                        {
                        double a = temp[y];
                        double b = power[y];

                        asciiNum += a* pow(2, b);
                        }

                    powerWord = asciiNum;
                    asciiNum = 0;
                    word += powerWord;

                    }
            }
        }
}
cout << endl;
	// Обратная кодировка
    for (int g = 0; g < 39; g++)
        {
            for (std::size_t w = 0; w < words[g].size(); ++w)
            {
                if (w == 4)
                {
                    cout << bitset<7>(words[g].c_str()[w]) << " ";
                }else{
                    cout << bitset<8>(words[g].c_str()[w]) << " ";
                }
            }
            cout << endl;
        }

}

int main(){

    int mas[39][39] =  {
                        {0,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1},
                        {0,1,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0},
                        {0,1,1,0,0,0,0,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0},
                        {0,1,1,0,0,0,0,1,0,1,1,0,1,1,0,1,0,1,1,0,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,1,0,0,1},
                        {0,1,1,0,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0},
                        {0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1},
                        {0,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,0},
                        {0,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0},
                        {0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0},
                        {0,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1,0},
                        {0,1,1,0,0,0,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0},
                        {0,1,1,1,0,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1},
                        {0,1,1,0,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,0,0,1,1,0,1,1,0,1,0,0},
                        {0,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0},
                        {0,1,1,0,0,0,1,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0},
                        {0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0},
                        {0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0},
                        {0,1,1,0,0,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,0,1},
                        {0,1,1,0,0,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0},
                        {0,1,1,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0},
                        {0,1,1,0,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,0,1,0},
                        {0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1},
                        {0,1,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,0,1,0},
                        {0,1,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0},
                        {0,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0},
                        {0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1},
                        {0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1},
                        {0,1,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,1,1,0,1},
                        {0,1,1,0,1,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1},
                        {0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,1,0},
                        {0,1,1,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0},
                        {0,1,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,1,1,0,1,0,0},
                        {0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,0},
                        {0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,0,0,0},
                        {0,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,0,0},
                        {0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1},
                        {0,1,1,1,0,0,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1},
                        {0,1,1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,0,1,0},
                        {0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1,0,0}
                        };

    convert(mas);
    system("pause");
}
